#### 数据表

**简介**

1. 学生表
   Student(SId,Sname,Sage,Ssex)
   SId 学生编号,Sname 学生姓名,Sage 出生年月,Ssex 学生性别

2. 课程表
   Course(CId,Cname,TId)
   CId 课程编号,Cname 课程名称,TId 教师编号

3. 教师表
   Teacher(TId,Tname)
   TId 教师编号,Tname 教师姓名

4. 成绩表
   SC(SId,CId,score)
   SId 学生编号,CId 课程编号,score 分数

**DDL**

1. 学生表

   ```mysql
   create table Student(SId varchar(10),Sname varchar(10),Sage datetime,Ssex varchar(10));
   insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
   insert into Student values('02' , '钱电' , '1990-12-21' , '男');
   insert into Student values('03' , '孙风' , '1990-12-20' , '男');
   insert into Student values('04' , '李云' , '1990-12-06' , '男');
   insert into Student values('05' , '周梅' , '1991-12-01' , '女');
   insert into Student values('06' , '吴兰' , '1992-01-01' , '女');
   insert into Student values('07' , '郑竹' , '1989-01-01' , '女');
   insert into Student values('09' , '张三' , '2017-12-20' , '女');
   insert into Student values('10' , '李四' , '2017-12-25' , '女');
   insert into Student values('11' , '李四' , '2012-06-06' , '女');
   insert into Student values('12' , '赵六' , '2013-06-13' , '女');
   insert into Student values('13' , '孙七' , '2014-06-01' , '女');
   ```

2. 课程表

   ```mysql
   create table Course(CId varchar(10),Cname nvarchar(10),TId varchar(10));
   insert into Course values('01' , '语文' , '02');
   insert into Course values('02' , '数学' , '01');
   insert into Course values('03' , '英语' , '03');
   ```

3. 教师表

   ```mysql
   create table Teacher(TId varchar(10),Tname varchar(10));
   insert into Teacher values('01' , '张三');
   insert into Teacher values('02' , '李四');
   insert into Teacher values('03' , '王五');
   ```

4. 成绩表

   ```mysql
   create table SC(SId varchar(10),CId varchar(10),score decimal(18,1));
   insert into SC values('01' , '01' , 80);
   insert into SC values('01' , '02' , 90);
   insert into SC values('01' , '03' , 99);
   insert into SC values('02' , '01' , 70);
   insert into SC values('02' , '02' , 60);
   insert into SC values('02' , '03' , 80);
   insert into SC values('03' , '01' , 80);
   insert into SC values('03' , '02' , 80);
   insert into SC values('03' , '03' , 80);
   insert into SC values('04' , '01' , 50);
   insert into SC values('04' , '02' , 30);
   insert into SC values('04' , '03' , 20);
   insert into SC values('05' , '01' , 76);
   insert into SC values('05' , '02' , 87);
   insert into SC values('06' , '01' , 31);
   insert into SC values('06' , '03' , 34);
   insert into SC values('07' , '02' , 89);
   insert into SC values('07' , '03' , 98);
   ```

 

#### 练习题

1. 查询" 01 "课程比" 02 "课程成绩高的学生的信息及课程分数
2. 查询同时存在" 01 "课程和" 02 "课程的情况
3. 查询存在" 01 "课程但可能不存在" 02 "课程的情况(不存在时显示为 null )
4. 查询不存在" 01 "课程但存在" 02 "课程的情况
5. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩
6. 查询在 SC 表存在成绩的学生信息
7. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )
8. 查有成绩的学生信息
9. 查询「李」姓老师的数量
10. 查询学过「张三」老师授课的同学的信息
11. 查询没有学全所有课程的同学的信息
12. 查询至少有一门课与学号为" 01 "的同学所学相同的同学的信息
13. 查询和" 01 "号的同学学习的课程 完全相同的其他同学的信息
14. 查询没学过"张三"老师讲授的任一门课程的学生姓名
15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩
16. 检索" 01 "课程分数小于 60，按分数降序排列的学生信息
17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩
18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率，及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90
19. 要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列
20. 按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺
21. 按各科成绩进行排序，并显示排名， Score 重复时合并名次
22. 查询学生的总成绩，并进行排名，总分重复时保留名次空缺
23. 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺
24. 统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比
25. 查询各科成绩前三名的记录
26. 查询每门课程被选修的学生数
27. 查询出只选修两门课程的学生学号和姓名
28. 查询男生、女生人数
29. 查询名字中含有「风」字的学生信息
30. 查询同名同性学生名单，并统计同名人数
31. 查询 1990 年出生的学生名单
32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列
33. 查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩
34. 查询课程名称为「数学」，且分数低于 60 的学生姓名和分数
35. 查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）
36. 查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数
37. 查询不及格的课程
38. 查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名
39. 求每门课程的学生人数
40. 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩
41. 成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩
42. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩
43. 查询每门功成绩最好的前两名
44. 统计每门课程的学生选修人数（超过 5 人的课程才统计）。
45. 检索至少选修两门课程的学生学号
46. 查询选修了全部课程的学生信息
47. 查询各学生的年龄，只按年份来算
48. 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
49. 查询本周过生日的学生
50. 查询下周过生日的学生
51. 查询本月过生日的学生
52. 查询下月过生日的学生

 

#### 答案

遵循格式：

* 关键字大写
* 字段以``标注
* 别名AS关键字不省略
* 不使用右联



1. 查询" 01 "课程比" 02 "课程成绩高的学生的信息及课程分数

   ```
    
   ```

2. 查询同时存在" 01 "课程和" 02 "课程的情况

   ```
    
   ```

3. 查询存在" 01 "课程但可能不存在" 02 "课程的情况(不存在时显示为 null )

   ```
    
   ```

4. 查询不存在" 01 "课程但存在" 02 "课程的情况

   ```
    
   ```

5. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩

   ```mysql
   SELECT student.*, avgsc.score
   FROM
        (
        SELECT sid, AVG(score) score
        FROM sc
        GROUP BY sid
        HAVING score > 60
        ) AS avgsc
             LEFT JOIN student
        ON avgsc.sid = student.sid
   ```

6. 查询在 SC 表存在成绩的学生信息

   ```mysql
    SELECT
    DISTINCT student.*
   FROM
    sc
    LEFT JOIN
     student
   ON
    sc.sid = student.sid
   ```

7. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )

   ```mysql
    SELECT
       s.*,
       sc1.course,
       sc1.score
   FROM
       student AS s
           LEFT JOIN
               (
                   SELECT
                       sid,
                       COUNT(cid) course,
                       SUM(score) score
                    FROM
                       sc
                    GROUP BY 1
               ) AS sc1
           ON s.sid = sc1.sid
   ```

8. 查有成绩的学生信息

   ```mysql
    SELECT
    s.*,
    sc1.course,
    sc1.score
     FROM
     student AS s
     LEFT JOIN
       (
       SELECT
              sid,
              COUNT(cid) course,
              SUM(score) score
       FROM
            sc
       GROUP BY 1
       ) AS sc1
       ON
           s.sid = sc1.sid
             WHERE
      sc1.course > 0
   ```

9. 查询「李」姓老师的数量

   ```mysql
   SELECT COUNT(t.Tname) FROM teacher t WHERE t.Tname LIKE '李% 
   ```

10. 查询学过「张三」老师授课的同学的信息

    ```mysql
     SELECT student.*
    FROM (
         SELECT
                sc.SId
         FROM
              (
              SELECT
                     course.CId
              FROM
                   (
                   SELECT
                          t.TId
                   FROM
                        teacher t
                   WHERE
                       t.Tname = '张三'
                   )v1
                     LEFT JOIN
                       course
                       ON
                           v1.TId = course.TId
              )v2
                LEFT JOIN
                  sc
                  ON
                      sc.CId = v2.CId
        )v3
    LEFT JOIN student
        ON v3.SId = student.SId
    ```

11. 查询没有学全所有课程的同学的信息

    ```mysql
         SELECT student.*
        FROM student
        WHERE student.SId
              NOT IN (
                     SELECT sc.SId
                     FROM sc
                     GROUP BY sc.SId
                     HAVING COUNT(sc.CId) = (SELECT COUNT(course.CId) FROM course)
                     )
    ```

12. 查询至少有一门课与学号为" 01 "的同学所学相同的同学的信息

    ```
         SELECT s.*
        FROM student s
        WHERE
            s.SId IN (
                SELECT DISTINCT sc.SId
                FROM sc
                WHERE
                    sc.CId IN (
                        SELECT sc.CId
                        FROM sc
                        WHERE sc.SId = '01'
                        )
                )
    ```

13. 查询和" 01 "号的同学学习的课程 完全相同的其他同学的信息

    ```
     
    ```

14. 查询没学过"张三"老师讲授的任一门课程的学生姓名

    ```mysql
     SELECT s.*
        FROM student s
        WHERE s.SId NOT IN (
            SELECT sc.SId
            FROM sc
            WHERE sc.CId IN (
                SELECT course.CId
                FROM course
                WHERE course.TId IN (
                    SELECT teacher.TId
                    FROM teacher
                    WHERE teacher.Tname = '张三'
                    )
                )
            )
    ```

15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩

    ```mysql
      SELECT s.*
          FROM
           student s,
           (
              SELECT sc.SId, AVG(sc.score)
              FROM sc
              GROUP BY sc.SId
           ) t1
          WHERE
          s.SId = t1.SId
          AND s.SId IN (
                     SELECT SId
                     FROM (
                          SELECT SId
                          FROM sc
                          WHERE score < 60
                          ) t2
                     GROUP BY SId
                     HAVING COUNT(SId) > 1
                      )
    ```

16. 检索" 01 "课程分数小于 60，按分数降序排列的学生信息

    ```mysql
       SELECT s.*, sc.score
        FROM student s, sc
        WHERE
            sc.CId = '01'
            AND sc.score < 60
            AND s.SId = sc.SId
        ORDER BY
            sc.score DESC
    ```

17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

    ```mysql
         SELECT *
        FROM sc LEFT JOIN
             (
             SELECT sc.SId, AVG(sc.score) avg
             FROM sc
             GROUP BY sc.SId
             ) t1
        ON sc.SId = t1.SId
        ORDER BY avg DESC
    ```

18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率，及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

    ```mysql
      SELECT
               sc.CId,
               COUNT(sc.SId) AS `account`,
               MAX(sc.score) AS `max`,
               MIN(sc.score) AS `min`,
               AVG(sc.score) AS `avg`,
               COUNT(IF(sc.score >= 60, TRUE , NULL )) / COUNT(sc.score) AS `及格率`,
               COUNT(IF(sc.score >= 70 AND sc.score < 80, TRUE , NULL )) / COUNT(sc.score) AS `中等率`,
               COUNT(IF(sc.score >=80 AND sc.score < 90, TRUE , NULL )) / COUNT(sc.score) AS `优良率`,
               COUNT(IF(sc.score >= 90, TRUE , NULL )) / COUNT(sc.score) AS `优秀率`
        FROM sc
        GROUP BY sc.CId
        ORDER BY account DESC , sc.CId
    ```

19. 要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列

    ```mysql
     
    ```

20. 按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺

    ```mysql
       set @crank=0;
     
        SELECT (@crank := @crank + 1) AS crank, t.SId
        FROM (
             SELECT sc.SId
             FROM sc
             GROUP BY sc.SId
             ORDER BY SUM(sc.score) DESC
        ) t
    ```

21. 按各科成绩进行排序，并显示排名， Score 重复时合并名次

    ```mysql
     
    ```

22. 查询学生的总成绩，并进行排名，总分重复时保留名次空缺

    ```mysql
     
    ```

23. 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺

    ```mysql
     
    ```

24. 统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比

    ```mysql
         SELECT
               sc.CId,
               COUNT(IF(sc.score >= 85, TRUE , NULL )) AS `[100-85]`,
               COUNT(IF(sc.score BETWEEN 70 AND 85, TRUE , NULL )) AS `[70-85]`,
               COUNT(IF(sc.score BETWEEN 60 AND 70, TRUE , NULL )) AS `[60-70]`,
               COUNT(IF(sc.score BETWEEN 0 AND 60, TRUE , NULL )) AS `[0-60]`
     
        FROM sc
        GROUP BY sc.CId
    ```

25. 查询各科成绩前三名的记录

    ```mysql
         SELECT *
        FROM sc
        WHERE (
                SELECT COUNT(*)
                FROM sc AS t
                WHERE
                    t.CId = sc.CId
                    AND t.score > sc.score
              ) < 3
        ORDER BY sc.CId, sc.score DESC
    ```

26. 查询每门课程被选修的学生数

    ```mysql
     SELECT COUNT(sc.SId)
    FROM sc
    GROUP BY sc.CId
    ```

27. 查询出只选修两门课程的学生学号和姓名

    ```mysql
    SELECT DISTINCT s.SId, s.Sname
    FROM student AS s, sc
    WHERE
        s.SId IN (
            SELECT sc.SId
            FROM sc
            GROUP BY sc.SId
            HAVING COUNT(sc.score) = 2
        ) 
    ```

28. 查询男生、女生人数

    ```mysql
    SELECT s.Ssex,COUNT(s.SId)
    FROM student AS s
    GROUP BY s.Ssex 
    ```

29. 查询名字中含有「风」字的学生信息

    ```mysql
    SELECT s.*
    FROM student AS s
    WHERE s.Sname LIKE '%风%' 
    ```

30. 查询同名同性学生名单，并统计同名人数

    ```mysql
    SELECT s.Sname, COUNT(s.SId)
    FROM student AS s
    GROUP BY s.Sname
    HAVING COUNT(s.SId) > 1 
    ```

31. 查询 1990 年出生的学生名单

    ```mysql
    SELECT s.SId, s.Sname
    FROM student AS s
    WHERE YEAR(s.Sage) = 1990 
    ```

32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列

    ```mysql
    SELECT sc.CId, AVG(sc.score) AS `avg`
    FROM sc
    GROUP BY sc.CId
    ORDER BY AVG(sc.score) DESC, sc.CId 
    ```

33. 查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩

    ```mysql
    SELECT t.*, s.Sname
    FROM
         (
         SELECT sc.SId, AVG(sc.score) AS avg
         FROM sc
         GROUP BY sc.SId
         HAVING avg > 85
         )t LEFT JOIN student AS s
         ON t.SId = s.SId 
    ```

34. 查询课程名称为「数学」，且分数低于 60 的学生姓名和分数

    ```mysql
    SELECT s.Sname, sc.score
    FROM student AS s, sc, course AS c
    WHERE
        c.Cname = '数学'
            AND sc.CId = c.CId
            AND sc.score < 60
            AND s.SId = sc.SId 
    ```

35. 查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）

    ```mysql
    SELECT s.SId, s.Sname, sc.CId, c.Cname, sc.score
    FROM
         student AS s LEFT JOIN sc ON s.SId = sc.SId
         LEFT JOIN course AS c ON sc.CId = c.CId
    ORDER BY s.SId, c.CId 
    ```

36. 查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数

    ```mysql
    SELECT sc.SId, s.Sname, c.Cname, sc.score
    FROM sc, student AS s, course AS c
    WHERE
     sc.score >= 70
     AND sc.SId = s.SId
     AND sc.CId = c.CId 
    ```

37. 查询不及格的课程

    ```mysql
    SELECT sc.SId, s.Sname, c.Cname, sc.score
    FROM sc, student AS s, course AS c
    WHERE
         sc.score <= 60
         AND sc.SId = s.SId
         AND sc.CId = c.CId 
    ```

38. 查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名

    ```mysql
    SELECT sc.SId, s.Sname, c.Cname, sc.score
    FROM sc, student AS s, course AS c
    WHERE
         sc.score >= 80
         AND sc.SId = s.SId
         AND sc.CId = c.CId
         AND sc.CId = '01' 
    ```

39. 求每门课程的学生人数

    ```mysql
    SELECT sc.CId, COUNT(sc.SId) AS `Snum`
    FROM sc
    GROUP BY sc.CId 
    ```

40. 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩

    ```mysql
    SELECT s.*, sc.score
    FROM student AS s, sc, teacher AS t, course AS c
    WHERE
         t.Tname = '张三'
         AND t.TId = c.TId
         AND c.CId = sc.CId
         AND s.SId = sc.SId
    ORDER BY sc.score DESC
    LIMIT 1 
    ```

41. 成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩

    ```mysql
    SELECT s.*, sc.score
    FROM student AS s,
         sc,
         (
         SELECT MAX(sc.score) AS max
         FROM student AS ss,sc,teacher AS tt, course AS cc
         WHERE tt.Tname = '张三'
           AND cc.TId = tt.TId
           AND sc.CId = cc.CId
         )m
     
    WHERE s.SId = sc.SId
      AND sc.score = m.max
      AND sc.score = m.max 
    ```

42. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩

    ```mysql
    SELECT *
    FROM
       sc,
    (
       SELECT sc.score, sc.SId
       FROM sc
      GROUP BY sc.score, sc.SId
       HAVING COUNT(sc.CId) > 1
       ) t
    WHERE sc.SId = t.SId
        AND sc.score = t.score 
    ```

43. 查询每门功成绩最好的前两名

    ```mysql
    SELECT sc1.CId, sc1.SId, sc1.score
        FROM sc AS sc1
        WHERE
            (
            SELECT COUNT(1)
            FROM sc AS sc2
            WHERE sc1.score < sc2.score
            AND sc1.CId = sc2.CId
            ) < 2
        ORDER BY sc1.CId 
    ```

44. 统计每门课程的学生选修人数（超过 5 人的课程才统计）

    ```mysql
    SELECT sc.CId, COUNT(sc.SId) AS `num`
    FROM sc
    GROUP BY sc.CId
    HAVING COUNT(sc.SId) > 5 
    ```

45. 检索至少选修两门课程的学生学号

    ```mysql
    SELECT sc.SId
    FROM sc
    GROUP BY sc.SId
    HAVING COUNT(sc.CId) > 1 
    ```

46. 查询选修了全部课程的学生信息

    ```mysql
    SELECT s.*
    FROM
         student AS s,
         (
         SELECT sc.SId
         FROM sc
         GROUP BY sc.SId
         HAVING COUNT(sc.CId) = (
         SELECT COUNT(DISTINCT c.CId)
         FROM course AS c
         )
         )t
    WHERE s.SId = t.SId 
    ```

47. 查询各学生的年龄，只按年份来算

    ```mysql
    SELECT s.SId, s.Sname, YEAR(CURRENT_DATE) - YEAR(s.Sage) AS age
    FROM student AS s 
    ```

48. 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一

    ```mysql
     SELECT s.Sname, TIMESTAMP (YEAR, CURRENT_DATE(), s.Sage)
    FROM student AS s
    ```

49. 查询本周过生日的学生

    ```mysql
    SELECT s.Sname
    FROM student AS s
    WHERE
        WEEKOFYEAR(s.Sage) = WEEKOFYEAR(CURRENT_DATE) 
    ```

50. 查询下周过生日的学生

    ```mysql
    SELECT s.Sname
    FROM student AS s
    WHERE
        WEEKOFYEAR(s.Sage) = WEEKOFYEAR(CURRENT_DATE) + -1 
    ```

51. 查询本月过生日的学生

    ```mysql
    SELECT s.Sname
    FROM student AS s
    WHERE
        MONTH(s.Sage) = MONTH(CURRENT_DATE) 
    ```

52. 查询下月过生日的学生

    ```mysql
    SELECT s.Sname
    FROM student AS s
    WHERE
        MONTH(s.Sage) = MONTH(CURRENT_DATE) + 1 
    ```

